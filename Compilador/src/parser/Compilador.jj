options
{
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
}

// ----- inicio: analisador lexico
PARSER_BEGIN(Compilador)
package parser; //pacote atual
// ----- importando outros pacotes que serao utilizados
import java.io.*;

import semantico.*;

public class Compilador
{
  static Tabela tabela = new Tabela();

  public static void main(String args []) throws ParseException
  {
    Compilador compilador;
    try
    {
      compilador = new Compilador(new FileInputStream(Config.nomeArquivo));
      compilador.inicio();

    }
    catch (FileNotFoundException e)
    {
      System.out.println("Erro: arquivo nao encontrado");
    }
    catch (TokenMgrError e)
    {
      System.out.println("Erro lexico\n" + e.getMessage());
    }
    catch (ParseException e)
    {
      System.out.println("Erro sintatico\n" + e.getMessage());
    }
     catch (ErroSemantico e) {
     System.out.println("Erro semantico\n" + e.getMessage());
    }
  }
}

PARSER_END(Compilador)

// ----- fim: analisador lexico
SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

//TOKENS DE COMANDOS 
TOKEN [ IGNORE_CASE ] :
{
  < EXIBE : "exibe" >
| < LEITURA : "le" >
| < SE : "se" >
| < FIMSE : "fim-se" >
| < ENQUANTO : "enquanto" >
| < FIMENQUANTO : "fim-enquanto" >
}

//TOKENS DE TIPOS 
TOKEN [ IGNORE_CASE ] :
{
  < NUMERO : "numero" >
| < PALAVRA : "palavra" >
}

//----------CARACTERES----------
TOKEN :
{
  < #CHAR :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < AP : "(" >
| < FP : ")" >
| < PV : ";" >
| < VIRGULA : "," >
| < STRING : "\"" (~[ "\"" ])* "\"" >
| < VAR : (< CHAR >)+ ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
}

//-----------NUMEROS-----------
TOKEN :
{
  < #DIGIT : [ "0"-"9" ] >
| < NUM : (< DIGIT >)* (".")? (< DIGIT >)+ >
}

//----------OPERADORES---------
TOKEN :
{
  < SOMA : "+" >
| < SUB : "-" >
| < MUL : "*" >
| < DIV : "/" >
| < OU : "OR" >
| < ATRIB : "<-" >
| < IGUAL : "=" >
| < CONCAT : "&" >
}



void inicio() :
{}
{
  programa()  {
    System.out.println(tabela.toString());
  } < EOF >
}

void programa() :
{}
{
  (
    comando()
  )*
}

void comando() :
{}
{
  atribuicao()
| declaracao()
| se()
| enquanto()
| le()
| exibe()
}

void atribuicao() :
{
  
}
{
  < VAR > 
  < ATRIB > 
  expressao()

  < PV >
}

void declaracao() :
{
  Simbolo simb;
  Token t;

}
{
  (
    < NUMERO >
  | < PALAVRA >
  )
  t = < VAR >
  {
    simb = new Simbolo(t.image);
    if(!tabela.verificaExistenciaSimbolo(t.image))tabela.incluiSimbolo(simb);
    else throw new ErroSemantico("A variavel -" + t.image + "- ja existe!\n");
  }
  (
    < ATRIB > 
    expressao()

  )?
  (
    < VIRGULA > t = < VAR >
    {
      simb = new Simbolo(t.image);
    if(!tabela.verificaExistenciaSimbolo(t.image))tabela.incluiSimbolo(simb);
    else throw new ErroSemantico("A variavel -" + t.image + "- ja existe!\n");
    }
    (
      < ATRIB > 
      expressao()

    )?
  )*
  < PV >
}

void se() :
{

}
{
  < SE > < AP > 
  expressao()

  < FP > programa() < FIMSE >
}

void enquanto() :
{

}
{
  < ENQUANTO > < AP > 
  expressao()

  < FP > programa() < FIMENQUANTO >
}

void le() :
{}
{
  < LEITURA > < VAR > (< VIRGULA > < VAR >)* < PV >
}

void exibe() :
{}
{
  < EXIBE > 
  expressao()

  (
    < VIRGULA > 
    expressao()

  )*
  < PV >
}

void expressao() :
{
Token t;
  Simbolo simb;
  Operador ou= new Operador();
  ou.tipoOperador=TipoOperador.OU;
}
{
  termo()
  (
    t=< OU > 
    termo()
      { simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);
    }
  )*
}

void termo() :
{Token t;
  Simbolo simb;
  Operador igual= new Operador();
  igual.tipoOperador=TipoOperador.IGUAL;
}
{
  termo1()
  (
    t=< IGUAL > 
    termo1()
    { simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);
    }
  )?

}

void termo1() :
{ Token t;
  Simbolo simb;
  Operador concat= new Operador();
  concat.tipoOperador=TipoOperador.CONCAT;
}
{
  termo2()

  (
    t=< CONCAT > 
    termo2()
    { simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);

    }
  )*

}

void termo2() :
{ 
Token t;
  Simbolo simb;
  Operador soma= new Operador();
  soma.tipoOperador=TipoOperador.SOMA;
  Operador sub= new Operador();
  sub.tipoOperador=TipoOperador.SUB;
}
{
  termo3()

  (
    (
       t=< SOMA >
      {simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);
      }
    | t=< SUB >
      {simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);
      }
    )
    termo3()

  )*

}

void termo3() :
{
Token t;
  Simbolo simb;
  Operador mul= new Operador();
  mul.tipoOperador=TipoOperador.MUL;
  Operador div= new Operador();
  div.tipoOperador=TipoOperador.DIV;
}
{
  termo4()

  (
    (
       t=< MUL >
      {simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);
      }
    |  t=< DIV >
      { simb = new Simbolo(t.image);
      tabela.incluiSimbolo(simb);
      }
    )
    termo4()
  )*

}

void termo4() :
{ 
  Token v, t;
  Simbolo simb, simb2;
  
  
  Operando num= new Operando();
  num.tipoDado=TipoDado.NUM;
  Operando var= new Operando();
 var.tipoElemento=TipoElemento.VAR;
 Operando str= new Operando();
      str.tipoDado=TipoDado.STRING;
}
{
  < AP > expressao() < FP >

| v = < NUM >
  {
     simb = new Simbolo(v.image);
      tabela.incluiSimbolo(simb);

  }
| < SOMA > v = < NUM >
  {
    
      
      simb = new Simbolo(v.image);
      tabela.incluiSimbolo(simb);
  }
| < SUB > v = < NUM >
  {
    

      simb = new Simbolo(v.image);
      tabela.incluiSimbolo(simb);
  }
| t = < VAR >
  
  {
    simb2= new Simbolo(t.image);
    if (!tabela.verificaExistenciaSimbolo(t.image) )
    throw new ErroSemantico("A variavel -" + t.image + "- \n nao foi inicializada");
  }
| v = < STRING >
  {
    
      simb = new Simbolo(v.image);
      tabela.incluiSimbolo(simb);

  }
}
